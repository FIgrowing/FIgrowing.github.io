<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MVCC机制及其原理</title>
    <url>/2023/55c34784.html</url>
    <content><![CDATA[<p>helllo！大家好，今天主要给大家分享一篇有关MySQL中可重复读隔离级别的实现原理，废话不多说，我们直接进入正题！</p>
<h1 id="四大隔离级别与MVCC机制"><a href="#四大隔离级别与MVCC机制" class="headerlink" title="四大隔离级别与MVCC机制"></a>四大隔离级别与MVCC机制</h1><p>在介绍可重复读的实现原理之前我们有必要先来了解一下四大隔离级别与MVCC机制的实现原理</p>
<h2 id="一-四大隔离级别"><a href="#一-四大隔离级别" class="headerlink" title="一.四大隔离级别"></a>一.四大隔离级别</h2><ul>
<li><font color="red">READ UNCOMMITTED</font>:读未提交，在该隔离级别下，所有事务都可以看到其他事务未提交的数据。不能避免脏读，不可重复读和幻读。</li>
<li><font color="red">READ COMMITTED</font>:读已提交，在该隔离级别下，一个事务只能看见其他事务已经提交的改变。可以避免脏读，但是依然存在不可重复读和幻读问题。</li>
<li><font color="red">REPEATABLE READ</font>:可重复读，当一个事务正在读取数据时，其他事务对该数据的修改对当前事务是不可见的。解决了不可重复读，也是MySQL的默认隔离级别，但依旧存在幻读问题。</li>
<li><font color="red">SERIALIZABLE</font>:可串行化，确保事务可以从一个表中读取相同的行。在这个事务持续期间，禁止 其他事务对该表执行插入、更新和删除操作。所有的并发问题都可以避免，但性能十分低下。能避 免脏读、不可重复读和幻读</li>
</ul>
<h2 id="二-MVCC"><a href="#二-MVCC" class="headerlink" title="二.MVCC"></a>二.MVCC</h2><h3 id="什么是MVCC机制呢？"><a href="#什么是MVCC机制呢？" class="headerlink" title="什么是MVCC机制呢？"></a>什么是MVCC机制呢？</h3><p>MVCC （Multiversion Concurrency Control），即多版本并发控制。顾名思义，是通过数据行的多个版本管理来实现数据库的并发控制。讲人话就是，每个事务都是在对数据行不同的版本进行操作，实现了数据一致性读的。</p>
<h3 id="MVCC的实现原理"><a href="#MVCC的实现原理" class="headerlink" title="MVCC的实现原理"></a>MVCC的实现原理</h3><h4 id="1-隐藏字段和Undo-Log版本链"><a href="#1-隐藏字段和Undo-Log版本链" class="headerlink" title="1.隐藏字段和Undo Log版本链"></a>1.隐藏字段和Undo Log版本链</h4><p>对InnoDB数据存储结构了解的朋友来说，想必对于trx_id和roll-pointer这两条隐藏列应该不陌生，这里再做一下解释</p>
<ul>
<li><p><strong>trx-id</strong>:每次对某一条聚簇索引改动时都会把该事务的id赋值给trx_id</p>
</li>
<li><p><strong>roll-pointer</strong>:每次对聚簇索引进行改变时，都会把旧版本写入undo日志中，而roll_pointer类似一个指针指向修改之前的那个旧版本，这样就可以通过该隐藏列修改之前的数据</p>
<p><img src="/../images/1-1.png"></p>
<p><strong>假如有两条id分别为10，20的事务对该条数据进行update操作</strong></p>
<table>
<thead>
<tr>
<th align="left">顺序</th>
<th>事务10</th>
<th>事务20</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td>begin;</td>
<td></td>
</tr>
<tr>
<td align="left">2</td>
<td></td>
<td>begin</td>
</tr>
<tr>
<td align="left">3</td>
<td>update set name&#x3D;”李四” where id &#x3D;1;</td>
<td></td>
</tr>
<tr>
<td align="left">4</td>
<td>update set name&#x3D;”王五” where id &#x3D;1;</td>
<td></td>
</tr>
<tr>
<td align="left">5</td>
<td>commit;</td>
<td></td>
</tr>
<tr>
<td align="left">6</td>
<td></td>
<td>update set name&#x3D;”钱七” where id &#x3D;1;</td>
</tr>
<tr>
<td align="left">7</td>
<td></td>
<td>update set name&#x3D;”宋八” where id &#x3D;1;</td>
</tr>
<tr>
<td align="left">8</td>
<td></td>
<td>commit;</td>
</tr>
</tbody></table>
<hr>
</li>
</ul>
<p><strong><font color="brown">其对应的undolog版本链如下：</font></strong></p>
<p><img src="/../images/1-2.png"></p>
<h4 id="2-ReadView"><a href="#2-ReadView" class="headerlink" title="2.ReadView"></a>2.ReadView</h4><h6 id="2-1-什么是ReadView？为什么要引入ReadView？"><a href="#2-1-什么是ReadView？为什么要引入ReadView？" class="headerlink" title="2.1 什么是ReadView？为什么要引入ReadView？"></a>2.1 什么是ReadView？为什么要引入ReadView？</h6><p>ReadView其实就是一个事务开启时对某条记录进行操作时生成的版本快照。</p>
<ul>
<li>使用 READ UNCOMMITTED 隔离级别的事务，由于可以读到未提交事务修改过的记录，所以直接读取记录的最新版本就好了。</li>
<li>使用 SERIALIZABLE 隔离级别的事务，InnoDB规定使用加锁的方式来访问记录。</li>
<li>使用 READ COMMITTED 和 REPEATABLE READ 隔离级别的事务，都必须保证读到 已经提交了的 事务修改 过的记录。假如另一个事务已经修改了记录但是尚未提交，是不能直接读取最新版本的记录的。</li>
</ul>
<p><strong>核心问题就是需要判断一下版本链中的哪个版本是当前事务可见的，这是ReadView要解决的主要问题。</strong></p>
<h6 id="2-2-ReadView的主要组成部分"><a href="#2-2-ReadView的主要组成部分" class="headerlink" title="2.2 ReadView的主要组成部分"></a>2.2 ReadView的主要组成部分</h6><ul>
<li><strong>creator-trx-id</strong>:创建这个 Read View 的事务 ID。</li>
<li><strong>trx-ids</strong>:表示当前系统中活跃的事务的id列表</li>
<li><strong>min-trx-id</strong>:表示当前活跃事务列表中最小的事务id</li>
<li><strong>max-trx-id</strong>:表示生成ReadView时系统中应该分配给下一个事务的 id 值（这里需要注意的是，max-trx-id是指的系统中的最大事务id之后应该分配的id，有别于最大活跃事务id）</li>
</ul>
<h5 id="2-3-ReadView的应用规则"><a href="#2-3-ReadView的应用规则" class="headerlink" title="2.3 ReadView的应用规则"></a>2.3 ReadView的应用规则</h5><p>有了这个ReadView就可以根据以下规则判断当前版本信息是否可见</p>
<ul>
<li><p>如果当前被访问版本的trx_id与当前ReadView的creator-trx-id相同，那就意味着当前事务正在访问它之前修改过的数据，所以该版本的数据对于当前事务来说是可见的</p>
</li>
<li><p>如果当前被访问版本的trx_id小于ReadView中的min-trx-id:，那就意味着生成该ReadView版本的事务在当前版本生成ReadView之前就已经提交了，所以该条记录对于当前事务来说是可见的</p>
</li>
<li><p>如果当前被访问版本的trx_id大于或等于max-trx-id:，那就意味着生成该版本的事务是在当前版本生成ReadView之后才开启的，所以版本数据对于当前事务来说是不可见的</p>
</li>
<li><p>如果当前被访问版本的ReadView的trx_id在min-trx-id和max-trx-id之间的话，那就要判断一下trx_id在不在trx_ids列表中，此时存在两种情况</p>
<p><em><strong>第一种情况：</strong></em> ReadView的trx_id<strong>在</strong>min-trx-id和max-trx-id之间，那么生成该版本的事务还未提交，因此，对于当前事务来说该版本的记录是不可见的 </p>
<p><em><strong>第二种情况：</strong></em> ReadView的trx_id<strong>不在</strong>min-trx-id和max-trx-id之间，那么就意味着生成该ReadView版本的事务已经提交，该版本的记录对于当前事务来说是可见的</p>
</li>
</ul>
<h5 id="2-4-思考题"><a href="#2-4-思考题" class="headerlink" title="2.4 思考题"></a>2.4 思考题</h5><p>不知道看到这里的朋友有没有思考过这样一个问题，如下：<br>现在有两个活跃的事务A,B他们的id分别是10和20，当A查询了某条记录后，B对该记录做了修改，并且B提交了事务，<br>此时，该记录的ReadView的trx_id应该为20，此时A事务再去对该记录进行查询操作，这时候A会发现这条记录的ReadView为20既比自己的10大，又比max_trx_id（21）小，且不在trx_ids里面，根据上面提到的ReadView应用规则，A事务是可以去读取这条记录的，那这不违反了可重复读的隔离机制了吗？别急，接下来我们就来讲讲MVCC机制是如何来实现隔离级别的。</p>
<h2 id="三-MVCC机制如何保证隔离级别的实现"><a href="#三-MVCC机制如何保证隔离级别的实现" class="headerlink" title="三.MVCC机制如何保证隔离级别的实现"></a>三.MVCC机制如何保证隔离级别的实现</h2><p>想必能看到这里的朋友们对MVCC的原理已经有了基本的了解，那么接下来我们就来看看MVCC机制如何保证隔离级别的实现，由于READ UNCOMMITTED 隔离级别的事务是当前读，SERIALIZABLE 隔离级别的事务是基于锁实现的，所以，我们在这里主要讨论<strong>读已提交和可重复读</strong>。</p>
<h3 id="3-1-MVCC的整体操作流程"><a href="#3-1-MVCC的整体操作流程" class="headerlink" title="3.1 MVCC的整体操作流程"></a>3.1 MVCC的整体操作流程</h3><ol>
<li>首先获取事务自己的版本号，也就是事务id</li>
<li>然后获取ReadView</li>
<li>将自己的事务id与ReadView的trx_id进行比较</li>
<li>如果不符合ReadView的规则，那么就从Undo Log中获取历史快照</li>
<li>最后返回符合规则的数据</li>
</ol>
<h3 id="3-2-在隔离级别为读已提交时"><a href="#3-2-在隔离级别为读已提交时" class="headerlink" title="3.2 在隔离级别为读已提交时"></a>3.2 在隔离级别为读已提交时</h3><p>在隔离级别为读已提交时，每一次执行select语句，每次都会重新获取一次最新的ReadView</p>
<table>
<thead>
<tr>
<th align="center">事务</th>
<th align="center">ReadView获取情况</th>
</tr>
</thead>
<tbody><tr>
<td align="center">begin；</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">select * from student where id &#x3D;1;</td>
<td align="center">获取一次ReanView</td>
</tr>
<tr>
<td align="center">…….</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">select * from student where id &#x3D;1;</td>
<td align="center">获取一次ReanView</td>
</tr>
<tr>
<td align="center">commit</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="3-3-在隔离级别为可重复读时"><a href="#3-3-在隔离级别为可重复读时" class="headerlink" title="3.3 在隔离级别为可重复读时"></a>3.3 在隔离级别为可重复读时</h3><p>在隔离级别为可重复读时，事务开启后只有在第一次select语句后才会获取ReadView，之后的select都是沿用这个ReadView，并不会再去获取新的ReadView</p>
<p><img src="/../images/1-3.png"></p>
<h3 id="3-4-解释2-4思考题"><a href="#3-4-解释2-4思考题" class="headerlink" title="3.4 解释2.4思考题"></a>3.4 解释2.4思考题</h3><p>从以上在两种不同隔离机制下对MVCC的讲解不难看出，由于使用的隔离级别是可重复读的隔离级别，因此，从A事务开始并第一次执行select语句时，就产生了一个ReanView，此后A事务对该条数据进行的查询语句都是基于该版本的记录进行查询，因此B事务对该条数据的操作对A来说是不可见的。</p>
<h3 id="3-5-如何解决幻读"><a href="#3-5-如何解决幻读" class="headerlink" title="3.5 如何解决幻读"></a>3.5 如何解决幻读</h3><p>假设现在student表中有如下所示的一条数据：</p>
<table>
<thead>
<tr>
<th>trx_id&#x3D;10</th>
<th>数据<br />id&#x3D;1,name&#x3D;”张三”，age&#x3D;18</th>
<th>roll_pointer&#x3D;null</th>
</tr>
</thead>
</table>
<p>现有两个事务A，B，他们的id分别是20和30</p>
<p><strong>步骤一：</strong>事务A首先执行查询语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from student where id &gt;=1; </span><br></pre></td></tr></table></figure>

<p>在开始查询前ReadView的情况如下：trx_ids&#x3D;[20,30]，min_trx_id&#x3D;20 , max_trx_id&#x3D;31 , creator_trx_id&#x3D;20。由于<strong>trx_id&lt;min_tex_id</strong>,所以该条数据对于事务A可见</p>
<p><strong>步骤二：</strong>事务B往表中插入两条数据，并提交事务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into student(id,name,age) values(2,&#x27;李四&#x27;,12);</span><br><span class="line">insert into student(id,name,age) values(3,&#x27;王五&#x27;,16); </span><br></pre></td></tr></table></figure>

<p><strong>步骤三：</strong>接着事务 A 开启第二次查询，根据可重复读隔离级别的规则，此时事务 A 并不会再重新生成ReadView。此时表 student 中的 3 条数据都满足 where id&gt;&#x3D;1 的条件，因此会先查出来。然后根据ReadView 机制，判断每条数据是不是都可以被事务 A 看到。</p>
<p><strong><font  color="red">分析如下</font></strong>:</p>
<ul>
<li><p>对于id&#x3D;1的记录，由于第一次和第二次查询使用的是同一个ReadView，所以该条数据能够被查询出来</p>
</li>
<li><p>对于id&#x3D;2和id&#x3D;3的记录，其实无论B事务提不提交对于A来说B的操作都是不可见的，理由如下：</p>
</li>
<li><p>如果B没有提交事务那么根据上面ReadView使用规则的第四条可以判断B事务新增的记录不可见</p>
</li>
<li><p>如果B提交了事务，此时trx_ids&#x3D;[20]，min_trx_id&#x3D;20，那么根据上面ReadView使用规则的第三条也可以判断这两条记录对于A来说不可见</p>
</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本文主要讲解了一下几点：</p>
<ul>
<li><a href="#%E4%B8%80.%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">四大隔离级别</a></li>
<li><a href="#%E4%BA%8C.MVCC">MVCC机制及其实现原理</a></li>
<li><a href="#%E4%B8%89.MVCC%E6%9C%BA%E5%88%B6%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E5%AE%9E%E7%8E%B0">MVCC机制如何保证读已提交和可重复读的实现</a></li>
<li>[ReadView的应用规则](#2.3 ReadView的应用规则)</li>
<li>[MVCC如何解决幻读](#3.5 如何解决幻读)</li>
</ul>
<p>希望这篇文章能够让你对MVCC有更好的了解<img src="https://dl4.weshineapp.com/gif/20170714/776d24c1ce2b76a37367b886699a25f0.gif?f=micro_5byA5b+D" alt="img"></p>
]]></content>
      <tags>
        <tag>MySQL技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL之锁全家桶</title>
    <url>/2023/74dc7aa6.html</url>
    <content><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>思考一下，我们在面对脏写，脏读，不可重复读，幻读等并发问题时通常有什么解决办法呢？换句话说MySQL是怎么来避免这些问题的呢？其实这里一般有两种解决方案。</p>
<ul>
<li><p>**<font color="red">方案一:</font>**读操作利用MVCC机制(<a href="https://figrowing.github.io/2023/55c34784.html">详情请参照上一篇博客</a>)，写操作通过加锁来实现。</p>
</li>
<li><p>**<font color="red">方案二:</font>**读写操作都通过加锁来实现</p>
</li>
</ul>
<p>通过对以上两种方式对比，我们可以发现方案一采用**<font color="brown">方案一</font><strong>读写操作并不冲突，所以性能相较来说更高，而</strong><font color="brown">方案二</font>**读写操作可能要排队执行，相较来说性能更低。</p>
<p>一般情况下我们更愿意采用MVCC的方式来进行读写操作，但是有些情况就可能必须要用锁来避免并发问题，下面我们就来了解一下MySQL中有哪些锁，以及这些锁分别应用在什么场景。</p>
<h1 id="MySQL中的锁分类"><a href="#MySQL中的锁分类" class="headerlink" title="MySQL中的锁分类"></a>MySQL中的锁分类</h1><p><strong><font color="red">对数据操作类型分类：</font></strong></p>
<ul>
<li>读锁&#x2F;共享锁</li>
<li>写锁&#x2F;排他锁</li>
</ul>
<p><strong><font color="red">锁粒度分类:</font></strong></p>
<p><strong>表级锁：</strong></p>
<pre><code>        * 表级锁的X，S锁
        * 意向锁
        * 自增锁
        * MDL锁
</code></pre>
<p><strong>行级锁:</strong></p>
<ul>
<li>Record Locks（记录锁）</li>
<li>Gap Locks （间隙锁）</li>
<li>Next-Key Locks </li>
<li>插入意向锁</li>
</ul>
<p><strong>页级锁</strong></p>
<p><strong><font color="red">对锁的态度:</font></strong></p>
<ul>
<li>乐观锁</li>
<li>悲观锁</li>
</ul>
<p><strong><font color="red">加锁方式:</font></strong></p>
<ul>
<li>显示锁</li>
<li>隐式锁</li>
</ul>
<p><strong><font color="red">其他:</font></strong></p>
<ul>
<li>全局锁</li>
<li>死锁</li>
</ul>
<h1 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h1><p><img src="/../images/3-1.png"></p>
<h2 id="从数据操作的类型划分：读锁、写锁"><a href="#从数据操作的类型划分：读锁、写锁" class="headerlink" title="从数据操作的类型划分：读锁、写锁"></a>从数据操作的类型划分：读锁、写锁</h2><ul>
<li><p>读锁 ：也称为 共享锁 、英文用 S 表示。针对同一份数据，多个事务的读操作可以同时进行而不会 互相影响，相互不阻塞的。</p>
</li>
<li><p>写锁 ：也称为 排他锁 、英文用 X 表示。当前写操作没有完成前，它会阻断其他写锁和读锁。这样 就能确保在给定的时间里，只有一个事务能执行写入，并防止其他用户读取正在写入的同一资源。</p>
</li>
</ul>
<h2 id="按锁粒度分类"><a href="#按锁粒度分类" class="headerlink" title="按锁粒度分类"></a>按锁粒度分类</h2><h3 id="1-表级锁"><a href="#1-表级锁" class="headerlink" title="1.表级锁"></a>1.表级锁</h3><h4 id="1-1-表级别的X，S锁"><a href="#1-1-表级别的X，S锁" class="headerlink" title="1.1 表级别的X，S锁"></a>1.1 表级别的X，S锁</h4><p>在对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，InnoDB存储引擎是不会为这个表添加表级 别的 S锁 或者 X锁 的。在对某个表执行一些诸如 ALTER TABLE 、 DROP TABLE 这类的 DDL 语句时，其 他事务对这个表并发执行诸如SELECT、INSERT、DELETE、UPDATE的语句会发生阻塞。同理，某个事务 中对某个表执行SELECT、INSERT、DELETE、UPDATE语句时，在其他会话中对这个表执行 DDL 语句也会 发生阻塞。这个过程其实是通过在 server层 使用一种称之为 元数据锁 （英文名： Metadata Locks ， 简称 MDL ）结构来实现的。</p>
<ul>
<li>LOCK TABLES t READ ：InnoDB存储引擎会对表 t 加表级别的 S锁 。</li>
<li>LOCK TABLES t WRITE ：InnoDB存储引擎会对表 t 加表级别的 X锁。</li>
</ul>
<p>两种表锁模式</p>
<ul>
<li><p>表共享锁（S 锁）</p>
</li>
<li><p>表独占锁（X锁）</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">锁</th>
<th align="center">自己是否可读</th>
<th align="center">自己是否可写</th>
<th align="center">他人是否可读</th>
<th align="center">他人是否可写</th>
</tr>
</thead>
<tbody><tr>
<td align="center">读锁</td>
<td align="center">是</td>
<td align="center">否</td>
<td align="center">是</td>
<td align="center">否</td>
</tr>
<tr>
<td align="center">写锁</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">否</td>
<td align="center">否</td>
</tr>
</tbody></table>
<h4 id="1-2-意向锁"><a href="#1-2-意向锁" class="headerlink" title="1.2 意向锁"></a>1.2 意向锁</h4><p><strong><font color="blue">在讲意向锁之前我们先来讲讲意向锁要解决的问题,如下：</font></strong></p>
<p>现在有两个事务T1、T2，其中T2试图在该表级别上加上意向锁共享锁或者意向排他锁，如果没有表级意向锁的存在，那么T2事务就要去遍历该表的所有行判断有没有行锁，假设表有十万数据或者更多，每次都要遍历一次表，那么这将大大影响性能，有了意向锁，那么每次在加行锁的同时加上意向表锁，这样别的事务想要加表锁时只需要检查该表是否存在意向锁即可，无需遍历全表。了解了意向锁的作用后我们来看看意向锁的种类。</p>
<ul>
<li><p>意向共享锁：事务有意向对表中的某些行加共享锁（S锁）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。</span><br><span class="line"></span><br><span class="line">SELECT column FROM table ... LOCK IN SHARE MODE;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p>意向排他锁：事务有意向对表中的某些行加排他锁（X锁）</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。</span><br><span class="line"></span><br><span class="line">SELECT column FROM table ... FOR UPDATE;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>意向锁不会与行级的共享 &#x2F; 排他锁互斥！正因为如此，意向锁并不会影响到多个事务对不同数据行加排 他锁时的并发性。（不然我们直接用普通的表锁就行了）</p>
<h4 id="1-3-自增锁"><a href="#1-3-自增锁" class="headerlink" title="1.3 自增锁"></a>1.3 自增锁</h4><p>当有多个事务同时往表里面插入数据时，要先拿到表的自增锁，防止主键出现重复的值</p>
<h4 id="1-4-元数据锁（MDL锁）"><a href="#1-4-元数据锁（MDL锁）" class="headerlink" title="1.4 元数据锁（MDL锁）"></a>1.4 元数据锁（MDL锁）</h4><p>MDL 的作用是，保证读写的正确性。比 如，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个 表结构做变更 ，增加了一 列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。因此，当对一个表做增删改查操作的时候，加 MDL读锁；当要对表做结构变更操作的时候，加 MDL 写 锁。</p>
<h3 id="2-行级锁"><a href="#2-行级锁" class="headerlink" title="2.行级锁"></a>2.行级锁</h3><h4 id="2-1-记录锁"><a href="#2-1-记录锁" class="headerlink" title="2.1 记录锁"></a>2.1 记录锁</h4><p>顾名思义，就是把表中的一条数据给锁上。记录锁也分为S和X锁。</p>
<ul>
<li><p>当一个事务获取了一条记录的S型记录锁后，其他事务也可以继续获取该记录的S型记录锁，但不可 以继续获取X型记录锁；</p>
</li>
<li><p>当一个事务获取了一条记录的X型记录锁后，其他事务既不可以继续获取该记录的S型记录锁，也不 可以继续获取X型记录锁。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">事务A</th>
<th align="center">事务B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">begin；</td>
<td align="center">begin;</td>
</tr>
<tr>
<td align="center">update student set name &#x3D; “张三” where id &#x3D; 1;(未提交)</td>
<td align="center">update student set name &#x3D; “王五” where id &#x3D; 2;（成功）</td>
</tr>
<tr>
<td align="center">………</td>
<td align="center">update student set name &#x3D; “李四” where id &#x3D; 1;（阻塞）</td>
</tr>
<tr>
<td align="center">commit;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">A事务释放锁，更改完成</td>
</tr>
</tbody></table>
<h4 id="2-2-间隙锁"><a href="#2-2-间隙锁" class="headerlink" title="2.2 间隙锁"></a>2.2 间隙锁</h4><p><strong>Gap锁由来：</strong></p>
<p>MySQL 在 REPEATABLE READ 隔离级别下是可以解决幻读问题的，解决方案有两种，可以使用 MVCC 方 案解决，也可以采用 加锁 方案解决。但是在使用加锁方案解决时有个大问题，就是事务在第一次执行读 取操作时，那些幻影记录尚不存在，我们无法给这些 幻影记录 加上 记录锁 。InnoDB提出了一种称之为Gap Locks 的锁，官方的类型名称为： LOCK_GAP ，我们可以简称为 gap锁 。比如，把id值为8的那条 记录加一个gap锁的示意图如下。</p>
<p><img src="/../images/3-2.png"></p>
<p>图中id值为8的记录加了gap锁，意味着 不允许别的事务在id值为8的记录前边的间隙插入新记录 ，其实就是</p>
<p>id列的值(3, 8)这个区间的新记录是不允许立即插入的。比如，有另外一个事务再想插入一条id值为4的新 记录，它定位到该条新记录的下一条记录的id值为8，而这条记录上又有一个gap锁，所以就会阻塞插入 操作，直到拥有这个gap锁的事务提交了之后，id列的值在区间(3, 8)中的新记录才可以被插入。</p>
<p>gap锁的提出仅仅是为了防止插入幻影记录而提出的。</p>
<h4 id="2-3-临键锁"><a href="#2-3-临键锁" class="headerlink" title="2.3 临键锁"></a>2.3 临键锁</h4><p>有时候我们既想 锁住某条记录 ，又想 阻止 其他事务在该记录前边的 间隙插入新记录 ，所以InnoDB就提 出了一种称之为 Next-Key Locks 的锁，官方的类型名称为： LOCK_ORDINARY ，我们也可以简称为</p>
<p>next-key锁 。Next-Key Locks是在存储引擎 innodb 、事务级别在 可重复读 的情况下使用的数据库锁，</p>
<p>innodb默认的锁就是Next-Key locks。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin;</span><br><span class="line"></span><br><span class="line">select * from student where id &lt;=8 and id &gt; 3 for update;</span><br></pre></td></tr></table></figure>



<p>###其实2.3和2.2都是针对幻读问题产生的，但无论是单靠锁机制还是MVCC都无法彻底解决幻读问题，详细可以参考这篇博客， (“墙裂推荐”)[[(2 条消息) 如何理解MySQL中间隙锁可以避免幻读的问题？ - 知乎 (zhihu.com)](<a href="https://www.zhihu.com/question/422425988#:~:text=MySQL">https://www.zhihu.com/question/422425988#:~:text=MySQL</a> InnoDB 引擎的默认隔离级别虽然是「可重复读」，但是它很大程度上避免幻读现象（并不是完全解决了），解决的方案有两种： 1 针对 快照读 （普通 select,for update 语句的时候，会加上 next-key lock，如果有其他事务在 next-key lock 锁范围内插入了一条记录，那么这个插入语句就会被阻塞，无法成功插入，所以就很好了避免幻读问题。)] ###</p>
<h4 id="2-4-插入意向锁"><a href="#2-4-插入意向锁" class="headerlink" title="2.4 插入意向锁"></a>2.4 插入意向锁</h4><p>在一个事务向表中插入数据的时候，当要插入的位置被上了Gap锁之后，该事务就进入了等待状态，在这个等待状态下它会被分配一把锁，就是插入意向锁。插入意向锁是一种<font color="red">Gap锁，不是意向锁</font>，是由insert语句产生的锁。事实上插入意向锁并不会阻止别的事务继续获取该记录上任何类型的锁。</p>
<h3 id="3-页锁"><a href="#3-页锁" class="headerlink" title="3. 页锁"></a>3. 页锁</h3><p>页锁的粒度介于表锁和行锁之间，并发度和开销自然也处于两者之间。</p>
<h2 id="按对锁的态度-需要注意的是，乐观锁和悲观锁并不是锁，而是锁的-设计思想"><a href="#按对锁的态度-需要注意的是，乐观锁和悲观锁并不是锁，而是锁的-设计思想" class="headerlink" title="按对锁的态度(需要注意的是，乐观锁和悲观锁并不是锁，而是锁的 设计思想)"></a>按对锁的态度(需要注意的是，乐观锁和悲观锁并不是锁，而是锁的 设计思想)</h2><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁，是一种思想，顾名思义，思想悲观，每当有事务要来取数据的时候，他都会认为事务会更改数据（总有刁民想害朕🙁），所以每次拿数据的时候都会上锁，这样别的事务想拿到这个数据就只能阻塞等待直到拿到锁。Java中 synchronized 和 ReentrantLock 等独占锁就是 悲观锁思想的实现。</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁认为对同一数据的并发操作不会总发生，属于小概率事件，不用每次都对数据上锁，但是在更新 的时候会判断一下在此期间别人有没有去更新这个数据，也就是不采用数据库自身的锁机制，而是通过 程序来实现。(例如CAS，版本号机制)，乐观锁适用于读多写少的场景，可以提高并发量。</p>
<h4 id="实现乐观锁的两种机制"><a href="#实现乐观锁的两种机制" class="headerlink" title="实现乐观锁的两种机制"></a>实现乐观锁的两种机制</h4><ol>
<li>版本号机制</li>
</ol>
<p>在表中设计一个 版本字段 version ，第一次读的时候，会获取 version 字段的取值。然后对数据进行更 新或删除操作时，会执行 UPDATE … SET version&#x3D;version+1 WHERE version&#x3D;version 。此时 如果已经有事务对这条数据进行了更改，修改就不会成功。</p>
<ol start="2">
<li>时间戳机制</li>
</ol>
<p>时间戳和版本号机制一样，也是在更新提交的时候，将当前数据的时间戳和更新之前取得的时间戳进行 比较，如果两者一致则更新成功，否则就是版本冲突。 你能看到乐观锁就是程序员自己控制数据并发操作的权限，基本是通过给数据行增加一个戳（版本号或 者时间戳），从而证明当前拿到的数据是否最新。</p>
<h4 id="两种锁的应用场景"><a href="#两种锁的应用场景" class="headerlink" title="两种锁的应用场景"></a>两种锁的应用场景</h4><ol>
<li>乐观锁 适合 读操作多 的场景，相对来说写的操作比较少。它的优点在于 程序实现 ， 不存在死锁问题，不过适用场景也会相对乐观，因为它阻止不了除了程序以外的数据库操作。</li>
<li>悲观锁 适合 写操作多 的场景，因为写的操作具有 排它性 。采用悲观锁的方式，可以在数据库层 面阻止其他事务对该数据的操作权限，防止 读 - 写 和 写 - 写 的冲突。</li>
</ol>
<h2 id="按加锁的方式"><a href="#按加锁的方式" class="headerlink" title="按加锁的方式"></a>按加锁的方式</h2><h3 id="隐式锁"><a href="#隐式锁" class="headerlink" title="隐式锁"></a>隐式锁</h3><p><strong><font color="red">Look Here!!!</font></strong></p>
<p>在介绍隐式锁之前，我们先来看这样一个场景</p>
<table>
<thead>
<tr>
<th align="center">事务A</th>
<th align="center">事务B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">begin;</td>
<td align="center">begin;</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from student</td>
</tr>
<tr>
<td align="center">insert into student values(1,张三，18)</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">select * from student</td>
</tr>
</tbody></table>
<p>思考一下B事务第二次select查询是什么情况？没错，聪明的你肯定想到了~~阻！塞！等！待！</p>
<p>从这里就可以我们就可以引出有关隐式锁的话题了…….</p>
<h3 id="什么是隐式锁"><a href="#什么是隐式锁" class="headerlink" title="什么是隐式锁"></a>什么是隐式锁</h3><p>一个事务在执行insert语句时(此时没有任何锁结构且<strong>未提交</strong>)，此时突然来了另一个事务</p>
<ul>
<li>立即使用select….. in share mode 来读取这条插入但未提交的数据，此时存在<font color="red">脏读</font>的问题</li>
<li>立即修改这条记录，也就是想获取这条记录的X锁，此时存在<font color="red">脏写</font>的问题</li>
</ul>
<p>这时，我们的隐式锁就起作用了，在一个事务执行insert语句时，会加一个隐式锁，这个锁不会被锁查询语句查询出来，就是用来避免再事务未提交前，其他事务对该条记录进行访问。具体实现就是依靠<font color="red">事务id</font>，如下：</p>
<ul>
<li><p>情景一：对于聚簇索引记录来说，有一个 trx_id 隐藏列，该隐藏列记录着最后改动该记录的 事务</p>
<p>id 。那么如果在当前事务中新插入一条聚簇索引记录后，该记录的 trx_id 隐藏列代表的的就是 当前事务的 事务id ，如果其他事务此时想对该记录添加 S锁 或者 X锁 时，首先会看一下该记录的trx_id 隐藏列代表的事务是否是当前的活跃事务，如果是的话，那么就帮助当前事务创建一个 X锁 （也就是为当前事务创建一个锁结构， is_waiting 属性是 false ），然后自己进入等待状态 （也就是为自己也创建一个锁结构， is_waiting 属性是 true ）</p>
</li>
<li><p>情景二：对于二级索引记录来说，本身并没有 trx_id 隐藏列，但是在二级索引页面的 Page Header 部分有一个 PAGE_MAX_TRX_ID 属性，该属性代表对该页面做改动的最大的 事务id ，如 果 PAGE_MAX_TRX_ID 属性值小于当前最小的活跃 事务id ，那么说明对该页面做修改的事务都已 经提交了，否则就需要在页面中定位到对应的二级索引记录，然后回表找到它对应的聚簇索引记 录，然后再重复情景一的做法。</p>
</li>
</ul>
<h3 id="显示锁"><a href="#显示锁" class="headerlink" title="显示锁"></a>显示锁</h3><p>通过特定的语句进行加锁，我们一般称之为显示加锁.</p>
<p>例如： 显示加共享锁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ....  lock in share mode</span><br></pre></td></tr></table></figure>

<p>显示加排他锁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ....  for update</span><br></pre></td></tr></table></figure>





<h2 id="其他锁"><a href="#其他锁" class="headerlink" title="其他锁"></a>其他锁</h2><h3 id="其他锁之全局锁"><a href="#其他锁之全局锁" class="headerlink" title="其他锁之全局锁"></a>其他锁之全局锁</h3><p>全局锁就是对 整个数据库实例 加锁。当你需要让整个库处于 只读状态 的时候，可以使用这个命令，之后 其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结 构等）和更新类事务的提交语句。全局锁的典型使用 场景 是：做 全库逻辑备份</p>
<p>全局锁的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flush tables with read lock</span><br></pre></td></tr></table></figure>



<h3 id="其他锁之死锁"><a href="#其他锁之死锁" class="headerlink" title="其他锁之死锁"></a>其他锁之死锁</h3><p>玩归玩，闹归闹，别拿死锁开玩笑~~</p>
<p><strong>定义：</strong>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环。</p>
<p>死锁示例：</p>
<table>
<thead>
<tr>
<th align="center">事务A</th>
<th align="center">事务B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">begin;<br />update student set name &#x3D; “张三” where id &#x3D; 1;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center">begin;<br />update student set name &#x3D; “李四” where id &#x3D; 2;</td>
</tr>
<tr>
<td align="center">begin;<br />update student set name &#x3D; “王五” where id &#x3D; 2;</td>
<td align="center">begin;<br />update student set name &#x3D; “赵六” where id &#x3D; 1;</td>
</tr>
<tr>
<td align="center">……..阻塞等待，直到超时</td>
<td align="center">…….阻塞等待，直到超时</td>
</tr>
</tbody></table>
<p><img src="https://dl4.weshineapp.com/gif/20170321/15cb1189cd94ccaae2151070ae339adb.gif?f=micro_5pCe5LqL5oOF" alt="img"></p>
<p>这时候，事务A在等待事务B释放id&#x3D;2的行锁，而事务2在等待事务1释放id&#x3D;1的行锁。 事务1和事务2在互 相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有 两种策略 ：</p>
<ul>
<li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数innodb_lock_wait_timeout 来设置</li>
<li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务（将持有最少行级 排他锁的事务进行回滚），让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为on ，表示开启这个逻辑。</li>
</ul>
<p>第二种策略的成本分析 </p>
<p>方法1：如果你能确保这个业务一定不会出现死锁，可以临时把死锁检测关掉。但是这种操作本身带有 一定的风险，因为业务设计的时候一般不会把死锁当做一个严重错误，毕竟出现死锁了，就回滚，然后 通过业务重试一般就没问题了，这是 业务无损 的。而关掉死锁检测意味着可能会出现大量的超时，这是业务有损 的。</p>
<p>方法2：控制并发度。如果并发能够控制住，比如同一行同时最多只有10个线程在更新，那么死锁检测 的成本很低，就不会出现这个问题。 这个并发控制要做在 数据库服务端 。如果你有中间件，可以考虑在 中间件实现 ；甚至有能力修改MySQL源码的人，也可以做在MySQL里面。基本思路就是，对于相同行的更新，在进入引擎之前排队，这样在InnoDB内部就不会有大量的死锁检测工作了。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这篇博客主要介绍了MySQL的锁家族，对各种分门别类的锁也做了相应的讲解，希望对大家和自己有所帮助！想必看到这里的也是真爱了，哈哈哈哈。看完不妨照着顶上的锁图自己回想一下各种锁的分类以及作用。</p>
]]></content>
      <tags>
        <tag>MySQL技术分享</tag>
      </tags>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/link/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
